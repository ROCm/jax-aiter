name: JAX-AITER CI

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: [linux-mi355-4]

    env:
      IMAGE: rocm/jax:rocm7.0.2-jax0.6.0-py3.10-ubu22
      CONTAINER_NAME: rv_aiter_ci
      WORKDIR: /workspace
      JA_ROOT_DIR: /jax-aiter
      AITER_SYMBOL_VISIBLE: 1
      GPU_ARCHS: "gfx942;gfx950"
      AITER_ASM_DIR: /jax-aiter/third_party/aiter/hsa/gfx950
      ROCM_VERSION: 7.0.2

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Get third_party/aiter submodule SHA
        id: aiter_sha
        run: echo "sha=$(git -C third_party/aiter rev-parse HEAD)" >> "$GITHUB_OUTPUT"

      - name: Print host info
        run: |
          set -euxo pipefail
          whoami
          id -u; id -g
          uname -a
          docker --version
          rocm-smi || true

      - name: Pull container image
        run: docker pull "$IMAGE"

      - name: Launch build container (ROCm + big shm + devices + env)
        run: |
          set -euxo pipefail
          docker rm -f "$CONTAINER_NAME" 2>/dev/null || true
          docker run -d --name "$CONTAINER_NAME" \
            --network=host \
            --device=/dev/kfd \
            --device=/dev/dri \
            --ipc=host \
            --shm-size=64G \
            --group-add=video \
            --cap-add=SYS_PTRACE \
            --security-opt seccomp=unconfined \
            -e JA_ROOT_DIR="${{ env.JA_ROOT_DIR }}" \
            -e AITER_SYMBOL_VISIBLE="${{ env.AITER_SYMBOL_VISIBLE }}" \
            -e GPU_ARCHS="${{ env.GPU_ARCHS }}" \
            -e AITER_ASM_DIR="${{ env.AITER_ASM_DIR }}" \
            -v "${{ github.workspace }}:/jax-aiter" \
            -w "/jax-aiter" \
            "$IMAGE" tail -f /dev/null

      - name: Ensure base tooling inside container
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -euxo pipefail
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
              git ca-certificates curl build-essential pkg-config
            python3 -m pip install --upgrade pip
            python3 -m pip install cmake ninja pyyaml pytest pytest-xdist
            git --version
          '

      - name: Mark repos safe for Git (inside container)
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -eux
            git config --global --add safe.directory /jax-aiter
            git config --global --add safe.directory /jax-aiter/third_party/pytorch
            git config --global --add safe.directory /jax-aiter/third_party/aiter
          '

      - name: Display environment (in container)
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -euxo pipefail
            echo "========================================="
            echo "System Information"
            echo "========================================="
            echo "Container whoami: $(whoami || true)"
            echo "Container uid: $(id -u), gid: $(id -g)"
            echo "Working directory: $PWD"
            echo "Processors: $(nproc)"
            echo ""
            echo "ROCm SMI:"; rocm-smi || echo "rocm-smi not available"
            echo ""
            echo "ROCm Info (GPU details):"; rocminfo | grep -E "Marketing Name:|gfx" || true
            echo ""
            echo "========================================="
            echo "Environment Variables"
            echo "========================================="
            env
            echo "========================================="
          '

      - name: Apply PyTorch patch
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -euxo pipefail
            cd third_party/pytorch
            git apply ../../scripts/torch_caffe.patch
          '

      - name: Apply AITER patch
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -euxo pipefail
            cd third_party/aiter
            git apply ../../scripts/aiter_torch_remove.patch
          '

      - name: Build static PyTorch (full)
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -euxo pipefail
            rm -rf third_party/pytorch/build_static
            bash ./scripts/build_static_pytorch.sh
            echo "PyTorch static build completed"
            ls -la third_party/pytorch/build_static/lib/
          '

      - name: Build umbrella shared library
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -euxo pipefail
            make
            ls -lh build/jax_aiter_build/libjax_aiter.so
          '

      - name: Restore AITER JIT modules cache
        id: aiter_cache
        uses: actions/cache@v4
        with:
          path: build/aiter_build
          key: >
            aiter-so-${{ runner.os }}
            -aiter-${{ steps.aiter_sha.outputs.sha }}
            -jit-${{ hashFiles('jax_aiter/jit/**') }}
            -cfg-${{ hashFiles('scripts/**','**/optCompilerConfig.json') }}

      - name: Check if JIT outputs exist
        id: have_jit
        run: |
          set -euo pipefail
          cnt=0
          if ls build/aiter_build/*.so >/dev/null 2>&1; then
            cnt=$(ls build/aiter_build/*.so | wc -l)
          fi
          echo "count=$cnt" >> "$GITHUB_OUTPUT"

      - name: Decide whether to build JIT
        id: jit_decision
        run: |
          set -euo pipefail
          if [ "${{ steps.aiter_cache.outputs['cache-hit'] }}" = "true" ] \
            && [ "${{ steps.have_jit.outputs.count }}" != "0" ]; then
            echo "do_build=false" >> "$GITHUB_OUTPUT"
            echo "Cache hit & ${ { steps.have_jit.outputs.count } } .so files present. SKIP JIT."
          else
            echo "do_build=true" >> "$GITHUB_OUTPUT"
            echo "No/empty cache. BUILD JIT."

      - name: Build JIT modules
        if: steps.jit_decision.outputs.do_build == 'true'
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -euxo pipefail
            python3 jax_aiter/jit/build_jit.py --module module_custom
            ls -lh build/aiter_build/*.so
          '

      - name: Build JA frontend modules
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -euxo pipefail
            make ja_mods
            ls -lh build/jax_aiter_build/*.so
          '

      - name: Install ROCm PyTorch runtime wheel
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -euxo pipefail
            python3 -m pip install --upgrade pip
            pip install --find-links https://repo.radeon.com/rocm/manylinux/rocm-rel-7.0/ \
              torch==2.8.0+rocm7.0.0.git64359f59
          '

      - name: Install AITER
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -euxo pipefail
            pip install third_party/aiter
          '

      - name: Install JAX-AITER
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -euxo pipefail
            pip install .
          '

      - name: Build summary
        if: always()
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -euxo pipefail
            echo "========================================="
            echo "Build Summary"
            echo "========================================="
            echo "PyTorch static libs:"; ls -lh third_party/pytorch/build_static/lib/lib*.a 2>/dev/null || echo "Not found"
            echo ""
            echo "JAX-AITER umbrella library:"; ls -lh build/jax_aiter_build/libjax_aiter.so 2>/dev/null || echo "Not found"
            echo ""
            echo "AITER modules:"; ls -lh build/aiter_build/*.so 2>/dev/null || echo "None found"
            echo ""
            echo "JA modules:"; ls -lh build/jax_aiter_build/*.so 2>/dev/null || echo "None found"
            echo "========================================="
          '

      - name: Cleanup container
        if: always()
        run: docker rm -f "$CONTAINER_NAME" || true
