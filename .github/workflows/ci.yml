name: JAX-AITER CI

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: linux-mi355-4

    env:
      IMAGE: rocm/jax:rocm7.0.2-jax0.6.0-py3.10-ubu22
      CONTAINER_NAME: rv_aiter
      WORKDIR: /workspace

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Print host info
        run: |
          whoami
          uname -a
          docker --version
          rocm-smi || true

      - name: Pull container image
        run: docker pull "$IMAGE"

      - name: Launch build container (ROCm + big shm + devices)
        run: |
          docker rm -f "$CONTAINER_NAME" 2>/dev/null || true
          docker run -d --name "$CONTAINER_NAME" \
            --network=host \
            --device=/dev/kfd \
            --device=/dev/dri \
            --ipc=host \
            --shm-size=64G \
            --group-add=video \
            --cap-add=SYS_PTRACE \
            --security-opt seccomp=unconfined \
            -v "${{ github.workspace }}:${WORKDIR}" \
            -w "${WORKDIR}" \
            "$IMAGE" tail -f /dev/null

      - name: Ensure base tooling inside container (git, build tools, python deps)
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            set -eux
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
              git ca-certificates curl build-essential pkg-config
            python3 -m pip install --upgrade pip
            python3 -m pip install cmake ninja pyyaml pytest pytest-xdist
            git --version
          '

      - name: Set env inside container
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            cat <<EOF >> /etc/profile.d/jax_aiter.sh
            export JA_ROOT_DIR=${WORKDIR}
            export AITER_SYMBOL_VISIBLE=1
            export GPU_ARCHS=gfx942;gfx950
            export AITER_ASM_DIR=${WORKDIR}/third_party/aiter/hsa/gfx950/
            export ROCM_ARCH=gfx942
            export ROCM_PATH=/opt/rocm
            export PYTHON=python3
            EOF
          '

      - name: Display environment information (in container)
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            source /etc/profile.d/jax_aiter.sh
            echo "========================================="
            echo "System Information"
            echo "========================================="
            echo "Working directory: $PWD"
            echo "Number of processors: $(nproc)"
            echo ""
            echo "ROCm SMI:"; rocm-smi || echo "rocm-smi not available"
            echo ""
            echo "ROCm Info (GPU details):"; rocminfo | grep -E "Marketing Name:|gfx" || true
            echo ""
            echo "========================================="
            echo "Environment Variables"
            echo "========================================="
            echo "JA_ROOT_DIR: $JA_ROOT_DIR"
            echo "GPU_ARCHS: $GPU_ARCHS"
            echo "ROCM_ARCH: $ROCM_ARCH"
            echo "ROCM_PATH: $ROCM_PATH"
            echo ""
            echo "========================================="
            echo "Software Versions"
            echo "========================================="
            echo "Python: $(python3 --version)"
            echo "CMake: $(cmake --version | head -n1 || true)"
            echo "Ninja: $(ninja --version || true)"
            echo "========================================="
          '

      - name: Apply PyTorch patch
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            source /etc/profile.d/jax_aiter.sh
            cd third_party/pytorch
            git apply ../../scripts/torch_caffe.patch
          '

      - name: Apply AITER patch
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            source /etc/profile.d/jax_aiter.sh
            cd third_party/aiter
            git apply ../../scripts/aiter_torch_remove.patch
          '

      - name: Cache PyTorch static build
        id: cache-pytorch
        uses: actions/cache@v4
        with:
          path: |
            third_party/pytorch/build_static
            third_party/pytorch/.hipify_done
          key: pytorch-static-${{ runner.os }}-${{ hashFiles('third_party/pytorch/**/*.cpp', 'third_party/pytorch/**/*.h', 'scripts/build_static_pytorch.sh') }}
          restore-keys: |
            pytorch-static-${{ runner.os }}-

      - name: Build static PyTorch libraries
        if: steps.cache-pytorch.outputs.cache-hit != 'true'
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            source /etc/profile.d/jax_aiter.sh
            bash ./scripts/build_static_pytorch.sh
            ls -la third_party/pytorch/build_static/lib/ || true
          '

      - name: Verify PyTorch build artifacts
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            ls -lh third_party/pytorch/build_static/lib/lib*.a
            ls -d third_party/pytorch/build_static/install/include
          '

      - name: Build umbrella shared library
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            source /etc/profile.d/jax_aiter.sh
            make
            ls -lh build/aiter_build/libjax_aiter.so
          '

      - name: Build JIT modules
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            source /etc/profile.d/jax_aiter.sh
            python3 jax_aiter/jit/build_jit.py --module module_custom,libmha_bwd,libmha_fwd,module_fmha_v3_bwd,module_fmha_v3_fwd,module_fmha_v3_varlen_bwd,module_fmha_v3_varlen_fwd,module_mha_bwd,module_mha_fwd,module_mha_varlen_bwd,module_mha_varlen_fwd
            ls -lh build/aiter_build/*.so
          '

      - name: Run smoke test
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            python3 -c "from jax_aiter.mha import flash_attn_func, flash_attn_varlen; print(\"✓ jax-aiter import successful\")"
          '

      - name: Run tests
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            pytest -v tests/test_mha_varlen_ja.py || echo "⚠ varlen tests had issues"
            pytest -v tests/test_mha_ck_ja.py     || echo "⚠ CK tests had issues"
          '

      - name: Build summary
        if: always()
        run: |
          docker exec "$CONTAINER_NAME" bash -lc '
            echo "========================================="
            echo "Build Summary"
            echo "========================================="
            echo "PyTorch static libs:"; ls -lh third_party/pytorch/build_static/lib/lib*.a 2>/dev/null || echo "Not found"
            echo ""
            echo "JAX-AITER umbrella library:"; ls -lh build/aiter_build/libjax_aiter.so 2>/dev/null || echo "Not found"
            echo ""
            echo "JIT modules:"; ls -lh build/aiter_build/*.so 2>/dev/null || echo "None found"
            echo "========================================="
          '

      - name: Cleanup container
        if: always()
        run: |
          docker rm -f "$CONTAINER_NAME" || true